# Java_CollectionFramework

一、什么是集合
1、集合框架的结构、内容and每种集合的用途
        集合，顾名思义，它就是用来存储数据的对象，只不过在Java中这些数据指的就是其他对象。它是一种数据结构的体现，也是对数组在功能上的扩展。
        java.util 包下的集合框架主要由几个接口和实现类组成。

          List：有序存放，允许重复，可以存放不同类型的对象；
          Set：无序存放，不允许重复，可以存放不同类型的对象；
          SortedSet：排好序列的Set；
          Map：俗称键值对，比如手机中的电话本；
          SortedMap：排好序的Map。
        【注意】：所有的集合实现类，都只能存放对象。若需要存放基本数据类
                         型的数据，则需要使用对应包装类。另外。JDK 5.0以后，基本
                         类型可以自动转换成包装类型。
2、总结：集合是用来也只能存储其他对象的对象，代表了一种底层结构，用
          于扩展数组的功能。
                集合框架由一系列的接口和实现类组成，基本包括：List、Set、Map
          等，它们大多具有可迭代性和可比较性。                          
        【注意】：Set 也称集合，它相对于集合框架的概念更具体一些。

二、迭代器是什么
        迭代器是一种设计模式，在Java中是一个接口，也是一个轻量级的对象
            迭代器它提供一种访问一个集合对象中各个元素的方法，同时又不需要暴露该对象的内部细节。Java通过提供Iterable 和Iterator两个接口来实现集合类的可迭代性。迭代器主要的方法就是，首先用hasNext()作为循环条件；再用next()方法得到每一个元素；最后再进行相关的操作。
            
三、比较器是什么
          比较器是把集合或数组的元素强行按照指定方法进行排序的对象，它是实现了Comparator接口类的实例。如果一个集合元素的类型是可比较的(实现了Comparable接口) ，那么它就具有了默认的排序方法；比较器则是强行改变它默认的比较方式来进行排序。或者有的集合元素不可比较(没有实现Comparable接口) ，则可用比较器来实现动态的排序。

四、Vector 与 ArrayList的区别
        Vector是线程安全的，因为它操作元素的方法都是同步方法；
        而ArrayList不是线程安全的，它所有的方法都不是同步的。
        开发过程中应该根据需要进行选择，若需要保证线程安全的地方则需要使用Vector，而不必要的时候则无需使用Vector，因为ArrayList效率会高一些。
        
五、ArrayList 与 LinkedList 的区别
    从源码看来：
   【ArrayList源码】
public class ArrayList<E> extends AbstractList<E>
        implements List<E>, RandomAccess, Cloneable, java.io.Serializable
{

   【LinkedList源码】
public class LinkedList<E>
    extends AbstractSequentialList<E>
    implements List<E>, Deque<E>, Cloneable, java.io.Serializable
{

          从两个集合类的源码看来，ArrayList实现了RandomAccess接口，即就是支持随机访问，
        而LinkedList没有实现RandomAccess接口，所以它就不支持随机访问功能。
       两个都是实现了List接口：但ArrayList是List接口的大小可变数组的实现； LinkedList是List接口链表的实现。基于链表实现的方式使得LinkedList在插   
入和删除时更优于ArrayList，而随机访问则没有ArrayList效率快。

    相同点：都是实现了List接口，且都不是线程安全的。

PS：
1.LinkedList 插入，删除都是移动指针效率很高；查找需要进行遍历查询，效率较低。
2.LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。

3.ArrayList是可改变大小的数组，而LinkedList是双向链接串列

4.在ArrayList的中间插入或删除一个元素意味着这个列表中剩余的元素都会被移动；而在LinkedList的中间插入或删除一个元素的开销是固定的

5.ArrayList的空间浪费主要体现在在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费则体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。

五、HashMap和HashTable的区别
      HashMap 和 Hashtable 的区别：
       它们两者的区别主要有以下几个方面：
HashTable 的方法是同步的，HashMap不能同步。
HashTable 不允许null值（key 和 value都不可以）；
     HashMap允许null值（key 和 value都可以）。
HashTable有一个contains()方法，功能和containsValue()功能一样。
HashTable使用Enumeration，HashMap使用Iterator。
HashTable中 hash数组的初始化大小及其增长方式不同。
哈希值的使用不同，HashTable直接使用对象的hashCode，而HashMap会 重新计算 hash 值。
===================================================
线程安全方面：HashMap线程不安全，HashTable是线程安全的。HashMap内部实现没有任何线程同步相关的代码，所以相对而言性能要好一点。如果在多线程中使用HashMap需要自己管理线程同步。HashTable很多对外方法都使用synchronized包裹，所以是线程安全的，但是性能会相对差一些。

二者的父类不一样：HashMap继承自AbstractMap，HashTable继承自Dictionary。它们都实现Map, Cloneable, Serializable这些接口。AbstractMap中提供的基础方法更多，并且实现了多个通用的方法，而在Dictionary抽象类中只有少量的方法，并且都是abstract类型。

key和value的取值范围不同：HashMap的key和value都可以为null，但是HashTable的key和value都不能为null，当HashTable遇到null时，他会直接抛出NullPointerException异常信息。  对于HashMap如果get返回null，并不能表明HashMap不存在这个key，如果需要判断HashMap中是否包含某个key，就需要使用containsKey这个方法来判断。

初始容量不同：HashMap的initialCapacity默认为16，而HashTable的initialCapacity为11，增加的方式是old*2+1。HashMap中初始容量必须是2的幂,如果初始化传入的initialCapacity不是2的幂，将会自动调整为大于初始的initialCapacity最小的2的幂。

hash值的计算方式不同：HashMap计算的hash值 是对key的hashcode进行了二次hash，以获得更好的散列值，然后对table数组长度取模；而HashTable则直接使用key的hashCode方法得到。

有无contains方法：HashMap没有contains方法，而Hashtabl有contains方法。
//以下是Hashtable的方法
public synchronized boolean contains(Object value)
public synchronized boolean containsKey(Object key)
public boolean containsValue(Object value)
 
//以下是HashMap中的方法，注意，没有contains方法
public boolean containsKey(Object key)
public boolean containsValue(Object value)


Hashtable、HashMap都使用了 Iterator。而由于历史原因，Hashtable还使用了Enumeration的方式 。
两者存储规则不一样：
       HashMap的存储规则:优先使用数组存储, 如果出现Hash冲突, 将在数组的该位置拉伸出链表进行存储(在链表的尾部进行添加), 如果链表的长度大于设定值后, 将链表转为红黑树.
      HashTable的存储规则:优先使用数组存储, 存储元素时, 先取出下标上的元素(可能为null), 然后添加到数组元素Entry对象的next属性中(在链表的头部进行添加).出现Hash冲突时, 新元素next属性会指向冲突的元素. 如果没有Hash冲突, 则新元素的next属性就是null。
Entry<K,V> e = (Entry<K,V>) tab[index];
tab[index] = new Entry<>(hash, key, value, e);


六、集合使用泛型带来了什么好处
      集合使用泛型以后，可以达到元素类型明确的目的，避免了手动类型转换的过程，同时，也让开发者更加明确容器保存的是什么类型的数据。
      
七、如何把集合对象中的元素进行排序
      对于没有排序功能的集合来说，都可以使用java.util.Collections.sort()方法进行排序，它除了集合对象以外，还需要提供一个比较器。
       如果列表中的元素全都是相同类型的，并且这个类实现了Comparable接口，可以简单的调用Collections.sort()；如果这个类没有实现Comparable，就可以传递一个Comparator 实例作为sort()的第二个参数进行排序。
       另外，如果不想使用默认的分类顺序进行排序，同样可以传递一个Comparator 实例作为参数来进行排序。
       
八、符合什么条件的数据集合可以使用foreach循环
          数组 或者 实现了Iterable 接口的类实例，都是可以使用 foreach循环
     的。Java集合框架中的集合类大多数都符合第二条(实现了Iterable接口的类
     实例)，因此它们都是可以使用 foreach循环的。
     
九、List 和 Set 区别
Set：集合中的对象不按特定方式排序(针对内存地址来说，即非线性)，并且没有重复对象。它的有些实现类能对集合中的对象按特定方式排序。
     1.不允许重复对象,只允许一个 null 元素，根据equals和hashcode判断，一个对象要存储在set中，必须重写equals和hashcode方法；
     2.无序容器，你无法保证每个元素的存储顺序，TreeSet通过 Comparator  或者 Comparable 维护了一个排序顺序。
     3.Set 接口最流行的几个实现类是 HashSet、LinkedHashSet 以及 TreeSet。最流行的是基于 HashMap 实现的 HashSet；TreeSet 还实现了 SortedSet 接口，因此 TreeSet 是一个根据其 compare() 和 compareTo() 的定义进行排序的有序容器。
List：集合中的对象线性方式储存，可以有重复对象，允许按照对象在集合中的索引位置检索对象。有序可重复。
     1.可以允许重复的对象，可以插入多个null元素。
     2.是一个有序容器，保持了每个元素的插入顺序，输出的顺序就是插入的顺序。
     3.常用的实现类有 ArrayList、LinkedList 和 Vector。ArrayList 最为流行，它提供了使用索引的随意访问，而 LinkedList 则对于经常需要从 List 中添加或删除元素的场合更为合适。
     
十、List 和 Map 区别
Map：通过键值对进行取值，key-value一一对应的，其中key不可以重复，而value可以重复。
     区别：
     1. Map用 put(k,v) / get(k)，还可以使用containsKey()/containsValue()来检
          查其中是否含有某个key/value。
     2. List通过get()方法来一次取出一个元素。使用数字来选择一堆对象中的一
          个，get(0)...。(add/get)。
     3. Collection没有get()方法来取得某个元素。只能通过iterator()遍历元素。
     
十一、Set和hashCode以及equals方法的联系
      因为set接口中是不允许存在重复的对象或者值的，所以需要对存入set中的对象或者值进行判断，而hashCode和equals就是用来对这些对象和值进行判断的。
      
十二、迭代器和枚举之间的区别
     如果面试官问这个问题，那么他的意图一定是让我们区分Iterator不同于Enumeration的两个方面：
       ●Iterator允许移除从底层集合的元素。
       ●Iterator的方法名是标准化的。
       
十三、HashMap 的工作原理及代码实现，什么时候用到红黑树
                   https://blog.csdn.net/striveb/article/details/84657326
                   
十五、HashSet 和 HashMap 区别
      HashMap实现了Map接口，而HashSet实现Set接口；
      HashMap存储键值对，HashSet仅存储对象；
      HashMap调用put()方法向map中添加元素;HashSet调用add()方法向set中添加元素；
      HashMap比较快，因为是使用唯一的键来获取对象。


//set 的add方法，最终还要调用map的put方法进行存储元素
public boolean add(E e) {
        return map.put(e, PRESENT)==null;
}


十六、ConcurrentHashMap 的工作原理及代码实现，如何统计  所有的元素个数
           https://blog.csdn.net/striveb/article/details/84106768
十七、多线程情况下HashMap死循环的问题
1、容量大于 总量*负载因子  发生扩容时会出现环形链表从而导致死循环。
2、并发场景发生扩容，调用 resize() 方法里的 rehash() 时，容易出现环形链表。这样当获取一个不存在的 key 时，计算出的 index 正好是环形链表的下标时就会出现死循环。

这个过程为，先将 A 复制到新的 hash 表中，然后接着复制 B 到链头（A 的前边：B.next=A），本来 B.next=null，到此也就结束了（跟线程二一样的过程），但是，由于线程二扩容的原因，将 B.next=A，所以，这里继续复制A，让 A.next=B，由此，环形链表出现：
                                             B.next=A; A.next=B。
            https://www.cnblogs.com/dongguacai/p/5599100.html
            https://blog.csdn.net/linsongbin1/article/details/54708694
