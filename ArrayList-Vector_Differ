# Java_CollectionFramework

四、ArrayList和Vector之间的区别

   ArrayList的优缺点
       【ArrayList优点】：
               1. ArrayList底层以数组实现，是一种随机访问模式，再加上它实现了
                   RandomAccess接口，所以查找get的时候也很快。
               2. ArrayList在顺序添加一个元素的时候非常方便，只是往数组中添加
                   一个元素而已。
        【ArrayList缺点】：
               1. 删除元素的时候，涉及到一次元素复制，如果要复制的元素很多，
                   则就会比较耗费性能。
               2. 插入元素的时候，涉及到一次元素复制，如果要复制的元素很多，
                   则就会比较耗费性能。
                 因此，ArrayList比较适合顺序添加、随机访问的场景。

   ArrayList和Vector的区别
        ArrayList不是线程安全的，因为ArrayList中所有的方法都不是同步的，在
        并发下一定会出现线程安全问题。若我们想要使用ArrayList并且让它线程
        安全那就这样做：
            第一个方法是使用Collections.synchronizedList方法把我们的ArrayList变成
            一个线程安全的List，Eg：
               public static void main(String[] args) {
                   List<String> list=Collections.synchronizedList(new ArrayList<>());
                   list.add("aaa");
                   list.add("bbb");
                   for(int i=0;i<list.size();i++){
                       System.out.println(list.get(i));
                   }
               }


            第二方法是Vector，它是ArrayList的线程安全版本，Vector的实现90%和ArrayList
            都是一样的，区别在于：
               Vector是线程安全的，ArrayList不是线程安全的。
               Vector可以指定增长因子，若该增长因子指定了，那么扩容的时候会使每次新的数组
               大小会在原数组的大小基础上加上增长因子；如果不指定增长因子，那么就给原数组大小*2，
               源码如下：
                  int newCapacity = oldCapacity + ((capacityIncrement > 0) ?
                                               capacityIncrement : oldCapacity);













