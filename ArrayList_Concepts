# Java_CollectionFramework

ArrayList
   1、概述
     ArrayList是实现List接口的动态数组，所谓动态就是它的大小是可变的。实现了所有可选
     列表操作，并允许包括 null 在内的所有元素。除了实现 List 接口外，此类还提供一些
     方法来操作内部用来存储列表的数组的大小。
       每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。默认
       初始容量为10。随着ArrayList中元素的增加，它的容量也会不断的自动增长。

       在每次添加 add 新的元素时，ArrayList都会检查是否需要进行扩容操作，扩容操作
       带来数据向新数组的重新拷贝，所以如果我们知道具体业务数据量，在构造ArrayList
       时可以给ArrayList指定一个初始容量，这样就会减少扩容时数据的拷贝问题。当然在
       添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，
       这可以减少递增式再分配的数量。

package List;
//ArrayList 中ensureCapacity方法的使用与优化

//对于ArrayList 中的一个方法ensureCapacity(int n)，这个方法可以对ArrayList底层的
// 数组进行扩容，显式的调用这个函数。
//  （由源码可知，系统的默认扩容是：扩容为原数组长度的1.5倍）
//    如果参数n大于底层数组长度的1.5倍(默认扩容)，那么这个数组的容量就会被扩容到这个参数值n；
//    如果参数n小于底层数组长度的1.5倍(默认扩容)，那么这个容量就会被扩容到底层数组长度的1.5倍。

import java.util.ArrayList;
//总之，就是这个函数可以对底层数组进行扩容，在适当的时机，很好的利用这个函数，
//将会使我们写出来的程序性能得到提升。
public class ListDemo1 {
    public static void main(String[] args) {
        final int N=1000000;
        Object obj=new Object();
        ArrayList list1=new ArrayList();
        long start=System.currentTimeMillis();
        for(int i=0;i<N;i++){
            list1.add(obj);
        }
        System.out.println(System.currentTimeMillis()-start);

        ArrayList list2=new ArrayList();
        long start2=System.currentTimeMillis();
        list2.ensureCapacity(N);//显式的对底层数组进行扩容
        for(int i=0;i<N;i++){
            list2.add(obj);
        }
        System.out.println(System.currentTimeMillis()-start2);
    }
}

//运行结果：36
//         17
//第2段的效率显然比第1段高很多。
// 原因：因为第1段代码如果没有一次性扩到想要的最大容量
// 的话，它就会在添加元素的过程中，一点一点的进行扩容，
//要知道对数组的扩容是要进行数组拷贝的，这就会浪费大量的时间。
// 如果已经预知容器可能会装多少元素，最好显式的调用ensureCapacity这个方法，一次性扩容到位。


注意，线程安全与否：ArrayList实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。所以为了保证同步，最好的办法是在创建时完成，以防止外部对列表进行不同步的访问：
     List list = Collections.synchronizedList(new ArrayList(...));

2、ArrayList的继承关系
        ArrayList继承AbstractList抽象父类，实现了List接口（规定了List的操作规范）、RandomAccess（可随机访问）、Cloneable（可拷贝）、Serializable（可序列化）。

3、底层数据结构
      ArrayList的底层是一个Object数组，并且由transient修饰
      transient Object[] elementData;
                            // non-private to simplify nested class access
    被transient修饰，所以ArrayList底层数组不会参与序列化，而是使用另外的序列化方式：使用writeobject方法进行序列化。
就是只复制数组中有值的位置，其他未赋值的位置不进行序列化，可以节省空间。
//        private void writeObject(java.io.ObjectOutputStream s)
//        throws java.io.IOException{
//            // Write out element count, and any hidden stuff
//            int expectedModCount = modCount;
//            s.defaultWriteObject();
//
//            // Write out size as capacity for behavioural compatibility with clone()
//            s.writeInt(size);
//
//            // Write out all elements in the proper order.
//            for (int i=0; i<size; i++) {
//                s.writeObject(elementData[i]);
//            }
//
//            if (modCount != expectedModCount) {
//                throw new ConcurrentModificationException();
//            }
//        }


4、增删改查

      add() ：添加元素时，首先判断索引是否合法，然后检测是否需要扩容，最后使用System.arraycopy方法来完成数组的复制。
       这个方法无非就是使用System.arraycopy()方法将C集合(先准换为数组)里面的数据复制到elementData数组中。这里介绍下
       System.arraycopy()。该方法的原型为：
       public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)。
方法解释：该方法用来进行数组元素的复制。即将源数组src从srcPos位置开始的元素复制到dest数组中，复制
       长度为length，数据从dest的destPos位置开始粘贴。
//   public void add(int index, E element) {
//       rangeCheckForAdd(index);
//
//       ensureCapacityInternal(size + 1);  // Increments modCount!!
//       System.arraycopy(elementData, index, elementData, index + 1,
//               size - index);
//       elementData[index] = element;
//       size++;
//  }


       remove() ：删除元素时，同样判断索引是否合法，删除的方式是把被删除元素右边的元素左移，方法同样是使用System.arraycopy方法进行复制。
//   public E remove(int index) {
//       rangeCheck(index);
//
//       modCount++;
//       E oldValue = elementData(index);
//
//       int numMoved = size - index - 1;
//       if (numMoved > 0)
//           System.arraycopy(elementData, index+1, elementData, index,
//                   numMoved);
//       elementData[--size] = null; // clear to let GC do its work
//
//       return oldValue;
//   }


       clear() ：ArrayList提供了一个清空数组的方法，方法是将所有元素置为null，这样就可以让GC自动回收掉没有被引用的元素了。
//   /**
//    * Removes all of the elements from this list.  The list will
//    * be empty after this call returns.
//    */
//   public void clear() {
//       modCount++;
//
//       // clear to let GC do its work
//       for (int i = 0; i < size; i++)
//           elementData[i] = null;
//
//       size = 0;
//   }


        set() ：修改元素时，只需要检查下标即可进行修改操作。
//   public E set(int index, E element) {
//       rangeCheck(index);
//
//       E oldValue = elementData(index);
//       elementData[index] = element;
//       return oldValue;
//   }


         get() ：获取元素时，也是只需要检查下标即可进行获取操作。
//   public E get(int index) {
//       rangeCheck(index);
//
//       return elementData(index);
//   }

    上述方法都使用了rangeCheck方法，其实就是简单地检查下标而已。
//   private void rangeCheck(int index) {
//      if (index >= size)
//           throw new IndexOutOfBoundsException(outOfBoundsMsg(index));
//   }

5、modCount
//   protected transient int modCount = 0;

由以上代码可以看出，在一个迭代器初始的时候会赋予它调用这个迭代器的对象的modCount，
如何在迭代器遍历的过程中, 一旦发现这个对象的modcount和迭代器中存储的modcount不一样
那就抛异常
下面是这个的完整解释:
Fail-Fast 机制
因为 java.util.ArrayList 不是线程安全的，ArrayList，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。
这一策略在源码中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。
在迭代过程中，判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 ArrayList。
所以，当我们遍历那些非线程安全的数据结构时，尽量使用迭代器

6、初始容量and扩容方式
       初始容量是10，下面是扩容方法。
//  private static final int DEFAULT_CAPACITY = 10;

//扩容发生在add元素时，传入当前元素容量加一
   public boolean add(E e) {
    ensureCapacityInternal(size + 1);  // Increments modCount!!
    elementData[size++] = e;
    return true;
}

//这里给出初始化时的数组
private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};

//这说明：如果数组还是初始数组，那么最小的扩容大小就是size+1和初始容量中较大的一个，
          初始容量为10。
//因为addall方法也会调用该函数，所以此时需要做判断。
private void ensureCapacityInternal(int minCapacity) {
    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {
        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);
    }
    ensureExplicitCapacity(minCapacity);
}

//开始精确地扩容
private void ensureExplicitCapacity(int minCapacity) {
    modCount++;

    // overflow-conscious code
    //   如果此时扩容容量大于数组长度，执行grow，否则不执行。
    if (minCapacity - elementData.length > 0)
        grow(minCapacity);
}

      真正执行扩容的方法grow， 扩容方式是让新容量等于旧容量的1.5倍。
      当新容量大于最大数组容量时，执行大数扩容。
//        private void grow(int minCapacity) {
//            // overflow-conscious code
//            int oldCapacity = elementData.length;
//            int newCapacity = oldCapacity + (oldCapacity >> 1);
//            if (newCapacity - minCapacity < 0)
//                newCapacity = minCapacity;
//            if (newCapacity - MAX_ARRAY_SIZE > 0)
//                newCapacity = hugeCapacity(minCapacity);
//            // minCapacity is usually close to size, so this is a win:
//            elementData = Arrays.copyOf(elementData, newCapacity);
//        }

      当新容量大于最大数组长度，有两种情况：
                       一种是溢出，抛异常；一种是没溢出，返回整数的最大值。
private static int hugeCapacity(int minCapacity) {
    if (minCapacity < 0) // overflow
        throw new OutOfMemoryError();
    return (minCapacity > MAX_ARRAY_SIZE) ?
        Integer.MAX_VALUE :
        MAX_ARRAY_SIZE;
}

那为什么每次扩容处理都是1.5倍呢？而不是2.5、3、4倍呢？通过google查找，发现1.5倍的
扩容是最好的倍数。因为一次性扩容太大(例如2.5倍)可能会浪费更多的内存(1.5倍最多浪费33%，
而2.5被最多会浪费60%，3.5倍则会浪费71%……)但是一次性扩容太小，需要多次对数组重新分
配内存，对性能消耗比较严重。所以1.5倍刚刚好，既能满足性能需求，也不会造成很大的内存
消耗。

除了这个ensureCapacity()这个扩容数组外，ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize()方法来实现。该方法可以最小化ArrayList实例的存储量。
public void trimToSize() {
    modCount++;
    int oldCapacity = elementData.length;
    if (size < oldCapacity) {
        elementData = Arrays.copyOf(elementData, size);
    }
}

7、线程安全
        ArrayList是线程不安全的。在其迭代器iteator中，如果有多线程操作导致modcount
        改变，会执行fastfail。抛出异常。
    final void checkForComodification() {
        if (modCount != expectedModCount)
            throw new ConcurrentModificationException();
    }
