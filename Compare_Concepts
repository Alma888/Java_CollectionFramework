# Java_CollectionFramework

比较器 Comparable 和 Comparator

Java 中为我们提供了两种比较机制：Comparable 和 Comparator，他们之间有什么区别呢？接下来说说。

1、Comparable
                         ——自然顺序的比较s
         Comparable 在 java.lang包下，是一个接口，内部只有一个方法 compareTo()：
public interface Comparable<T> {
     public int compareTo(T o);
}


          Comparable 可以让实现它的类的对象进行比较，具体的比较规则是按照compareTo 方法中的规则进行。这种顺序称为 自然顺序。
compareTo 方法的返回值有三种情况：
/*
* @param   o the object to be compared.
* @return  a negative integer, zero, or a positive integer as this object
*          is less than, equal to, or greater than the specified object.
*/
//注释解释：@param o对象比较。
// @return负整数、零或正整数对象, 小于、等于或大于指定对象。
e1.compareTo(e2) < 0 即 e1 < e2
e1.compareTo(e2) = 0 即 e1 = e2
e1.compareTo(e2) >0  即 e1 > e2

     注意：
1、由于 null 不是一个类，也不是一个对象，因此在重写 compareTo 方法时应该注意
      e.compareTo(null) 的情况，即使 e.equals(null) 返回 false，compareTo 方法也应该
      主动抛出一个空指针异常 NullPointerException。
2、Comparable 实现类重写 compareTo 方法时一般要求 e1.compareTo(e2) == 0 的结果要和 e1.equals(e2) 一致。这样将来使用 SortedSet 等根据类的自然排序进行排序的集合容器时可以保证保存的数据的顺序和想象中一致。 如果第二点如果违反了会怎样呢？
举个例子，如果往一个 SortedSet 中先后添加两个对象 a 和 b，a b 满足 (!a.equals(b) && a.compareTo(b) == 0)，同时也没有另外指定个 Comparator，那当你添加完 a 再添加 b 时会添加失败返回 false, SortedSet 的 size 也不会增加，因为在 SortedSet 看来它们是相同的，而 SortedSet 中是不允许重复的。
        PS：Java对象的比较  和 Java集合框架的配合

（总结上图也就是：equals返回true ，则compareTo 最好返回0）
3、 实际上所有实现了 Comparable 接口的 Java 核心类的结果都和 equlas 方法保持一致。 实现了 Comparable 接口的 List 或则数组可以使用 Collections.sort() 或者 Arrays.sort() 方法进行排序。
实现了 Comparable 接口的对象才能够直接被用作 SortedMap (SortedSet) 的 key，要不然需在外边指定 Comparator 排序规则。
因此自己定义的类如果想要使用有序的集合类，需要实现 Comparable 接口，例如：
 //自然顺序是——>必须实现一个Comparable接口

 //该类可以和另一个Person类进行比较
public class Person implements Comparable<Person>{
    public String name;
    public int age;
    public int height;
    public int weight;
    public int level;
    public int gender;

    @Override
    public int compareTo(Person o) {
        return age-o.age;
        /*
        if(age<o.age){
            return -1;
        }else if(age==o.age){
            return 0;
        }else {
            return 1;
        }
        */
    }

    public static void main(String[] args) {
        Person p=new Person();
        p.name="James";
        p.age=18;
        Person q=new Person();
        q.name="Tom";
        q.age=20;

        int r=p.compareTo(q);
        if(r<0){
            System.out.println("p小于q");
        }else if(r==0){
            System.out.println("p等于q");
        }else {
            System.out.println("p大于q");
        }
    }
}

      像String、Integer这些类已经天生就实现了Comparable接口
         ===》所以字符串、数字本身就是具有自然顺序。
          后面重写 compareTo 时，要判断某个相同时对比下一个属性，把所有属性都比较一次。


2、Comparator
                           ——对象的非自然顺序的比较
        Comparator 是java中的接口，位于java.util包下，该接口抽象度极高，有必要掌握该接口的使用，排序其实只是Comparator能实现的功能之一，它不仅限于排序。
public interface Comparator<T> {
    //主要方法
    int compare(T o1, T o2);
    boolean equals(Object obj);
}


在List或数组中的对象如果没有实现Comparable接口时，那么就需要调用者为需要排序的数组
或List设置一个Compartor，Compartor的compare方法用来告诉代码应该怎么去比较两个实例，
然后根据比较结果进行排序。

        排序例子： 题目描述 输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。
【代码实现】
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class Solution {
    public String PrintMinNumber(int [] s) {
        if(s==null) return null;
        String s1="";
        ArrayList<Integer> list=new ArrayList<Integer>();
        for(int i=0;i<s.length;i++){
             list.add(s[i]);
        }
        Collections.sort(list,new Comparator<Integer>(){
            public int compare(Integer str1,Integer str2){
                String s1=str1+""+str2;
                String s2=str2+""+str1;
                return s1.compareTo(s2);
            }
        });
         for(int j:list){
                s1+=j;
             }
        return s1;
    }
}


        一般需要做比较的逻辑都可以使用的上Comparator，Comparator最常用的场景就是排序和分组，排序常使用Arrays和Collections的sort方法，而分组则可以使用提供的divider方法。
        排序和分组的区别在于:
        排序时，两个对象比较的结果有三种：大于，等于，小于。
        分组时，两个对象比较的结果只有两种：等于(两个对象属于同一组)，不等于(两个对象属于不同组)。

       对于非自然顺序的比较，必须要实现一个Comparator接口，并且要自己手动构造一个比较器，例如：
package Comparable_Comparator;
////对象的非自然顺序代码举例

import java.util.Comparator;

// 利用Comparator接口的实现类去执行排序功能
class PersonNameComparator  implements Comparator<Person> {
    public String name;
    public int age;
    public int height;
    public int weight;
    public int level;
    public int gender;

    @Override
    public int compare(Person o1, Person o2) {
        return o1.name.compareTo(o2.name);
    }

    public static void main(String[] args) {
        Person p=new Person();
        p.name="James";
        p.age=18;
        Person q=new Person();
        q.name="Tom";
        q.age=20;

        //构造一个比较器
        Comparator<Person> comparator=new PersonNameComparator();
        System.out.println("按照姓名比较");
        int s=comparator.compare(p,q);
        if(s<0){
            System.out.println("p小于q");
        }else if(s==0){
            System.out.println("p等于q");
        }else {
            System.out.println("p大于q");
        }
    }
}




3、总结
         Java 中的两种排序方式：
Comparable 自然排序。（实体类实现）
Comparator 是定制排序。（无法修改实体类时，直接在调用方创建）
同时存在时采用 Comparator（定制排序）的规则进行比较。

         对于一些普通的数据类型（比如 String, Integer, Double…），它们默认实现了Comparable 接口，实现了 compareTo 方法，我们可以直接使用。
         而对于一些自定义类，它们可能在不同情况下需要实现不同的比较策略，我们可以新创建 Comparator 接口，然后使用特定的 Comparator 实现进行比较。
这就是 Comparable 和 Comparator 的区别。















